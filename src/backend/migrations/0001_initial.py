# Generated by Django 4.0 on 2022-04-22 09:33

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DepartmentModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, verbose_name='部署名')),
            ],
            options={
                'verbose_name': '部署',
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='EntryFrameModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('start_at', models.DateTimeField(verbose_name='開始日時')),
                ('capacity', models.IntegerField(verbose_name='予約可能上限人数')),
            ],
            options={
                'verbose_name': '予約枠',
                'db_table': 'entry_frame',
            },
        ),
        migrations.CreateModel(
            name='EventCategoryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, verbose_name='名前')),
                ('str_id', models.CharField(max_length=32, verbose_name='識別子')),
                ('order', models.IntegerField(verbose_name='並び順')),
                ('icon_image_url', models.TextField(verbose_name='アイコン画像')),
            ],
            options={
                'verbose_name': 'イベントカテゴリ',
                'db_table': 'event_category',
            },
        ),
        migrations.CreateModel(
            name='EventEntryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(max_length=16, verbose_name='ステータス')),
                ('entry_code', models.CharField(max_length=32, verbose_name='受付番号')),
                ('entry_frame', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_entries', to='apps.entryframemodel', verbose_name='予約枠')),
            ],
            options={
                'verbose_name': 'イベント申請',
                'db_table': 'event_entry',
            },
        ),
        migrations.CreateModel(
            name='EventModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=32, verbose_name='名前')),
                ('state', models.CharField(max_length=16, verbose_name='状態')),
                ('str_id', models.CharField(max_length=32, verbose_name='識別子')),
                ('is_use_form', models.BooleanField(verbose_name='申請フォーム使用')),
                ('is_use_datepicker', models.BooleanField(verbose_name='予約フォーム使用')),
                ('reservable_start_time', models.TimeField(verbose_name='予約受付開始時間')),
                ('reservable_end_time', models.TimeField(verbose_name='予約受付終了時間')),
                ('reservable_minute_interval', models.IntegerField(verbose_name='予約枠間隔')),
                ('guidance_page_content', models.TextField(verbose_name='案内ページコンテンツ')),
                ('complete_page_content', models.TextField(verbose_name='予約完了ページコンテンツ')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='events', to='apps.departmentmodel', verbose_name='部署名')),
                ('event_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='events', to='apps.eventcategorymodel', verbose_name='イベントカテゴリ')),
            ],
            options={
                'verbose_name': 'イベント',
                'db_table': 'event',
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=256, unique=True)),
                ('hashed_password', models.TextField(verbose_name='暗号化パスワード')),
                ('name', models.CharField(max_length=64, verbose_name='名前')),
                ('name_kana', models.CharField(max_length=64, verbose_name='名前フリガナ')),
                ('address', models.CharField(max_length=512, verbose_name='住所')),
                ('is_valid', models.BooleanField(verbose_name='有効')),
            ],
            options={
                'verbose_name': 'ユーザ',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='UserTodoModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(max_length=16, verbose_name='ステータス')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_todos', to='apps.usermodel', verbose_name='ユーザ')),
            ],
            options={
                'verbose_name': '会員ToDoリスト',
                'db_table': 'user_todo',
            },
        ),
        migrations.CreateModel(
            name='UserTempInfoModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('latest_child_name', models.CharField(max_length=64, verbose_name='最新の子どもの名前')),
                ('latest_child_birthday', models.DateTimeField(verbose_name='最新の子どもの生年月日')),
                ('latest_father_name', models.CharField(max_length=64, verbose_name='最新の父の名前')),
                ('latest_father_birthday', models.DateTimeField(verbose_name='最新の父の生年月日')),
                ('latest_mother_name', models.CharField(max_length=64, verbose_name='最新の母の名前')),
                ('latest_mother_birthday', models.DateTimeField(verbose_name='最新の母の生年月日')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_temp_infos', to='apps.usermodel', verbose_name='ユーザ')),
            ],
            options={
                'verbose_name': '会員一時情報',
                'db_table': 'user_temp_info',
            },
        ),
        migrations.CreateModel(
            name='GeneralGuideFormModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(verbose_name='並び順')),
                ('form_type', models.CharField(max_length=32, verbose_name='フォームタイプ')),
                ('label', models.CharField(max_length=32, verbose_name='ラベル')),
                ('select_options', models.CharField(max_length=256, verbose_name='選択肢')),
                ('is_required', models.BooleanField(verbose_name='必須')),
                ('max_length', models.IntegerField(verbose_name='最大文字数バリデーション')),
                ('valid_chars', models.CharField(max_length=256, verbose_name='入力可能文字バリデーション')),
                ('regex_pattern', models.CharField(max_length=256, verbose_name='正規表現バリデーション')),
                ('is_personal_name_kanji', models.BooleanField(verbose_name='人名使用可能漢字')),
                ('form_help_text', models.TextField(verbose_name='フォーム説明')),
                ('word_help_title', models.CharField(max_length=32, verbose_name='用語説明タイトル')),
                ('word_help_text', models.TextField(verbose_name='用語説明')),
                ('value_src', models.CharField(max_length=256, verbose_name='自動入力参照元')),
                ('value_dest', models.CharField(max_length=256, verbose_name='データ連携先')),
                ('display_conditions', models.TextField(verbose_name='表示条件')),
                ('event_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='general_guide_forms', to='apps.eventcategorymodel', verbose_name='イベントカテゴリ')),
            ],
            options={
                'verbose_name': '総合案内フォーム',
                'db_table': 'general_guide_form',
            },
        ),
        migrations.CreateModel(
            name='FormModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(verbose_name='並び順')),
                ('form_type', models.CharField(max_length=32, verbose_name='フォームタイプ')),
                ('label', models.CharField(max_length=32, verbose_name='ラベル')),
                ('select_options', models.CharField(max_length=256, verbose_name='選択肢')),
                ('is_required', models.BooleanField(verbose_name='必須')),
                ('max_length', models.IntegerField(verbose_name='最大文字数バリデーション')),
                ('valid_chars', models.CharField(max_length=256, verbose_name='入力可能文字バリデーション')),
                ('regex_pattern', models.CharField(max_length=256, verbose_name='正規表現バリデーション')),
                ('is_personal_name_kanji', models.BooleanField(verbose_name='人名使用可能漢字')),
                ('form_help_text', models.TextField(verbose_name='フォーム説明')),
                ('word_help_title', models.CharField(max_length=32, verbose_name='用語説明タイトル')),
                ('word_help_text', models.TextField(verbose_name='用語説明')),
                ('value_src', models.CharField(max_length=256, verbose_name='自動入力参照元')),
                ('value_dest', models.CharField(max_length=256, verbose_name='データ連携先')),
                ('display_conditions', models.TextField(verbose_name='表示条件')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='forms', to='apps.eventmodel', verbose_name='イベント')),
            ],
            options={
                'verbose_name': 'フォーム',
                'db_table': 'form',
            },
        ),
        migrations.CreateModel(
            name='FormAnswerModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('answer', models.TextField(verbose_name='回答')),
                ('event_entry', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='form_answers', to='apps.evententrymodel', verbose_name='イベント申請')),
                ('form', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='form_answers', to='apps.formmodel', verbose_name='フォーム')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_answers', to='apps.usermodel', verbose_name='ユーザ')),
            ],
            options={
                'verbose_name': 'フォーム回答',
                'db_table': 'form_answer',
            },
        ),
        migrations.AddField(
            model_name='evententrymodel',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_entries', to='apps.eventmodel', verbose_name='イベント'),
        ),
        migrations.AddField(
            model_name='evententrymodel',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='event_entries', to='apps.usermodel', verbose_name='ユーザ'),
        ),
        migrations.AddField(
            model_name='entryframemodel',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entry_frames', to='apps.eventmodel', verbose_name='イベント'),
        ),
        migrations.CreateModel(
            name='AdminUserModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='admin_users', to='apps.departmentmodel', verbose_name='部署')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '管理ユーザ',
                'db_table': 'admin_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
